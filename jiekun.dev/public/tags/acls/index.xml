<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ACLs on Jiekun&#39;s Blog</title>
    <link>https://jiekun.dev/tags/acls/</link>
    <description>Recent content in ACLs on Jiekun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 24 Nov 2019 11:58:26 +0000</lastBuildDate>
    
	<atom:link href="https://jiekun.dev/tags/acls/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[听译]Redis 6.0新特性——ACLs</title>
      <link>https://jiekun.dev/posts/2019-11-24-redis-6-0%E6%96%B0%E7%89%B9%E6%80%A7-acls/</link>
      <pubDate>Sun, 24 Nov 2019 11:58:26 +0000</pubDate>
      
      <guid>https://jiekun.dev/posts/2019-11-24-redis-6-0%E6%96%B0%E7%89%B9%E6%80%A7-acls/</guid>
      <description>在2019年纽约的Redis Day上，Salvatore Sanfilippo（AKA Antirez）介绍了即将发布的Redis 6.0的新特性。
ACLs简介 在过去的十年中，Redis都会有这样的问题：
用户执行FLUSHALL，OK现在整个数据库就空了，或者执行DEBUG SEGFAULT，然后Redis的进程就crash退出了。
在以前解决这个问题的办法可能是在Redis配置中将危险命令进行rename：
name-command FLUSHALL &amp;quot;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 这样将命令更名为随机字符串或者直接屏蔽掉，以满足需要。
缺少危险命令管理就会导致很多问题，比如当你使用网络上的一些库的时候，你压根就不知道别人会不会在里面加些FLUSHALL这样的命令，或者你也可以每次用外部代码都进行一轮Code Review。
当有了ACLs之后，你就可以控制比如：
这个连接只允许使用RPOP，LPUSH这些命令，其他命令都无法调用。
是不是很方便？来看看ACLs是怎么工作的。
最佳实践 首先你要做的是定义用户。
当登录的时候，旧版本中默认用户（defaule user）是可以做任何事的，在Redis 6.0中你可以定义默认用户：
127.0.0.1:6379&amp;gt; ACL setuser antirez on &amp;gt;password1 &amp;gt;password2 &amp;gt;foobar +@all ~*&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; setuser…on表示启用此用户，off则是只定义一个不可用（unaccessable）的用户。
&amp;gt;password1 &amp;gt;password2 &amp;gt;foobar表示设置了3个密码，可以用来做密码轮换策略。
+@all表示用户可以使用所有权限，+后面跟命令权限如+get，或者+@后面跟某一类权限。
~*表示可用（accessable）的键名，这里是*也就是所有键都可被访问。
127.0.0.1:6379&amp;gt; ACL WHOAMI &amp;quot;default&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 现在是处于默认用户下的，切换用户：
127.0.0.1:6379&amp;gt; AUTH antirez foobar OK&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 在以前AUTH后面是直接跟密码的，现在是用户名和密码。
127.0.0.1:6379&amp;gt; ACL WHOAMI &amp;quot;antirez&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 因为之前给这个用户设置的是所有命令可用+所有键可见，所以现在跟default用户没有什么区别：
127.0.0.1:6379&amp;gt; GET foo (nil) 127.0.0.1:6379&amp;gt; SET foo bar OK&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 现在去掉一些权限：
127.0.0.1:6379&amp;gt; ACL setuser antirez -SET&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 把这个用户的SET权限去掉后，就不能进行这个操作了：</description>
    </item>
    
  </channel>
</rss>