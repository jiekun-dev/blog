<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>原理 on Jiekun&#39;s Blog</title>
    <link>https://jiekun.dev/tags/%E5%8E%9F%E7%90%86/</link>
    <description>Recent content in 原理 on Jiekun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 17 Nov 2019 04:57:23 +0000</lastBuildDate>
    
	<atom:link href="https://jiekun.dev/tags/%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(WIP)Docker原理</title>
      <link>https://jiekun.dev/posts/2019-11-17-wipdocker%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 17 Nov 2019 04:57:23 +0000</pubDate>
      
      <guid>https://jiekun.dev/posts/2019-11-17-wipdocker%E5%8E%9F%E7%90%86/</guid>
      <description>Docker原理 主题一：Docker容器的资源隔离和限制管理 概述 Docker是基于Go实现的，它使用了namespaces来为不同容器提供独立环境。简单来说，当创建一个容器时，Docker创建了容器的一系列namespaces，不同容器只能在它所在的namespaces内操作相关资源，而察觉不到其他namespaces内存在的资源。
同时，Docker还使用了control groups(cgroups)来实现对资源使用的限制。
namespaces 从内核版本4.10开始，Linux有7种namespace:
 Mount Process ID Network Interprocess Communication UTS User ID Control group  在/proc/$PID/ns下可以看到对应的namespaces链接:
# root@duck-MS-7A34:/proc/1172/ns# ll total 0 dr-x--x--x 2 root root 0 11月 13 17:42 ./ dr-xr-xr-x 9 gdm gdm 0 11月 13 17:41 ../ lrwxrwxrwx 1 root root 0 11月 13 17:42 cgroup -&amp;gt; &#39;cgroup:[4026531835]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 ipc -&amp;gt; &#39;ipc:[4026531839]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 mnt -&amp;gt; &#39;mnt:[4026531840]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 net -&amp;gt; &#39;net:[4026531992]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 pid -&amp;gt; &#39;pid:[4026531836]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 pid_for_children -&amp;gt; &#39;pid:[4026531836]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 user -&amp;gt; &#39;user:[4026531837]&#39; lrwxrwxrwx 1 root root 0 11月 13 17:42 uts -&amp;gt; &#39;uts:[4026531838]&#39;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 如果两个进程指向的namespace编号相同，就说明它们在同一个namespace下。查看宿主机的其他进程的ns发现是指向同样编号的ns。</description>
    </item>
    
  </channel>
</rss>