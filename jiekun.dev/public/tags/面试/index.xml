<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on Jiekun&#39;s Blog</title>
    <link>https://jiekun.dev/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Jiekun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 28 Mar 2020 09:14:35 +0000</lastBuildDate>
    
	<atom:link href="https://jiekun.dev/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shopee面试复盘</title>
      <link>https://jiekun.dev/posts/2020-03-28-shopee%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Sat, 28 Mar 2020 09:14:35 +0000</pubDate>
      
      <guid>https://jiekun.dev/posts/2020-03-28-shopee%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>背景 了解到Shopee最初是在其他dalao的面经、V2EX上。因为2月份字节跳动的面试失利，而且结合2020年年初整体环境的情况，所以打算做个100 Day Countdown复习再尝试的，不过综合考虑觉得金三银四的机会错过可能就没有了，最后在三月初的时候找dalao内推了Shopee的岗位。同期在考虑的还有网易和360的一些岗位，网易在广州的主要是游戏岗，技术栈上Match的程度会相对低一些，而且了解到部分目标岗位入职之后貌似是以Python为主，而我目前做的也是Python开发，但是更倾向于接触Go和Go的生态（云原生），这个也是优先考虑Shopee机会的原因之一。
面试 因为赶上春招，所以大概面试官们都比较忙，投递之后大约过了2周HR电话联系，约了一面时间。
一面（1小时17分钟） 一面我要求在了一个比较晚的时间，因为Shopee晚上是不面试的，所以定在了下午大概下班前一点的时候，然而没有想到一聊就聊了接近80分钟，结束的时候已经接近7点了。
 自我介绍 介绍基本的项目架构，问了Elasticsearch在项目中的用途 每日新增数据量*00w，不算少了，用MySQL怎么样做的？  看具体业务，例如新增这块是某些业务数据的快照，用作趋势图 新增数据多，分策略处理，按业务分区，定时归档到oss   除去归档之后数据还有多大？以什么样的方式检索？  除去归档之后的量级在千万级 虽然有千万，但是根据业务查询做Partition，每个tablespace不大，使用xx作为主键，查询也按照主键，速度可以接受   对Percona和它MySQL的分支了解多少？它改表的工具有看过吗？原理能说一下吗，改表过程中一致性如何保证？  Percona的工具一般都是运维在用，自己RSS了他们的博客，阅读和翻译感兴趣的文章 pt-osc，改表通过创建新表，复制旧表数据最后原子操作RENAME替换完成。（答得不在点子上，最重要的通过Trigger保障过程中的一致性没有提出来）   有做过分享过BloomFilter，分享的原理还是应用？  Both 概率型过滤器，业务上用做去重判定，有在团队里面推广，目前在新业务上准备尝试 Redis中使用Bitmap实现，对判断内容Hash置位，如果对应位置都已经置位过说明元素可能存在，反之必然不存在   用过Redis的哪些数据结构？redis-cell是什么？  除了基础的5种结构以外，还尝试过HyperLogLog，布隆过滤器，redis-cell，stream redis-cell是一个外挂模块，漏斗模型限流   有用过Redis的Cluster吗？了解原理吗？如果有节点挂了会怎么样？  业务使用Redis的部分数据量比较少所以用不上，自己有尝试过 基于槽分配，将集群划分成16384个槽，分配给不同节点，当所有槽分配完毕的时候集群上线 如果用官方工具创建类似典型的三主三从集群，主节点挂掉之后会自动有从节点顶上   用Redis不同的数据结构都实现过什么业务？  HyperLogLog，和BloomFilter相似，场景为概率型的计数，例如超大量的每日访问IP数（PV），代替set类型 ZSET，做过排行榜 String，做日常缓存   了解Redis HASH结构的实现吗？怎么保证查找的复杂度是O(1)？  底层是一个字典 Emmm…（场面一度尴尬，觉得很基础又一时说不上来，最后猜测是Hash之后通过内存地址查找所以是O(1)）不太了解    然后聊到这里附近的时候远程聊天网络原因断开了一下orz，多给了一点点思考的时间，虽然重连之后还是答得不太满意。
 有用过短域名服务吗，能说一下吗？  （简历上写了一个TinyURL系统架构设计的博客，不知道面试官是看到了所以对这方面感兴趣，还是这么凑巧他想问一个我设计过的架构） 方案：自增ID + Base62 细节：自增ID肯定是唯一的，问题在于如何保证在分布式系统中不同节点的自增ID没有重复，使用ZooKeeper提前对号段进行划分，应用节点自行获取和内部维护 比较：MD5、UUID、自增Base62，各有优势，使用HASH的方案需要考虑冲突问题，UUID太长   大访问量的情况下这个业务怎么设计？  短链有失效时间吗？（一天内访问非常频繁，后面急剧下降） 那将生成的数据放到Cache中设置1天TTL，Cache不存在回MySQL查（这里有遗漏的点没有答好，场景下会产生大量的短链长链对应关系，数据量级也需要考虑和处理，不可能无限增长下去，面试官提问的时候有强调到，但是回答之后貌似刚好也和我一样漏掉了XD）   如果要求长域名一样的时候对应短域名也一样怎么设计？  每次回表查关系，但是这样不理想 思路是判定的时候需要查询，那么就想办法降低查询次数，没出现过的URL肯定会对应新短链，那么结合BloomFilter判定是否曾经出现过，如果出现过再回表确认真的出现还是BloomFilter的误判   有试过BloomFilter数据量比较大的时候占用Redis空间有多少吗？  很低，但是不知道具体数字（这里是个超级大坑，一面没有深究，二面的时候被追问细节，然而当初是想一二面一起复盘所以orz）   业务已经很久，数据量大，需要做分表或者归档，会怎么做？  归档貌似不行，旧数据还是要可用 分表按照业务场景，查询是围绕短链ID，根据短链ID做hash分表而不是自增ID，这里视情况可能需要设计上用短链ID作为主键   用Python里面的数据结构实现一个有序集合，思路  （答得不是很好，问到了讲的几个思路的复杂度的计算，自己打个50分不及格） List + Dict（期望小于O(n)可以吗？） …（求求自己回去多看看数据结构） SkipList（真的不会，于是开始胡扯…）   写SQL：找出A表存在，B表不存在的id  写了一个NOT IN，强调性能不佳 补充一个LEFT JOIN WHERE IS NULL的方案 小表驱动大表   MySQL事务隔离级别？你们用的级别？可重复读是什么意思？  4个 可重复读 解释了一下Read Commited里面不可重复读的场景，可重复读解决了这种问题，但是会存在幻读问题;强调InnoDB中使用Next-Key Locking，在Repeatable Read中就已经解决了幻读问题，解释了一下Gap Lock和Record Lock   了解乐观锁与悲观锁吗？  描述了一下以及讲一下怎么使用乐观锁   了解InnoDB的索引实现？B+树和B树有什么区别？  B+树 高扇出性，层数少、叶子节点带指针、B+树数据全部在叶子节点，B树索引节点也存数据   SQL题：哪个SQL能用上全部索引 都是在用Python是吗？还会其他语言吗？  读书的时候写PHP，现在在学Go   对Python装饰器的理解？  （写了3行代码表达装饰器是对方法进行前置处理和后处理的夹心饼结构） -（更好的表达应该是强调将被装饰对象作为参数传递，因为它是First Class Object，同时执行前后进行额外的逻辑，最后返回）   写了一小段代码，问如何调用装饰器内部的定义的方法 写了一小段闭包的代码，问执行结果  答了一个错误的执行结果和正确的闭包概念 （我确认我是清晰理解了闭包的概念，但是思考的时候多操了一份心，又考虑了一些mutable object和immutable object的事情，结果就答错了结果，气坏了）   Python的functools和itertools有用过什么吗？Collections用到什么？  有用过，但是一时想不起来里面的方法/对象了，经常用Collections 用到defaultdict、OrderedDict、Counter等等   进程与线程 Python的多线程可以用到多核，一般多线程用来做什么，多线程多进程用的什么库？ 了解HTTPS加密过程吗？讲一下握手的过程 浏览器的缓存了解多少？自己建站静态文件会加缓存吗？ 编程题：Word Break和翻转二叉树 有什么问题想问吗？  对我的建议 技术分享 开源文化    一面结束之后过了几天接到HR电话，约了第二面的时间。</description>
    </item>
    
    <item>
      <title>字节跳动一面复盘 &amp; Redis多线程IO模型源码学习</title>
      <link>https://jiekun.dev/posts/2020-02-22-%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2%E5%A4%8D%E7%9B%98-redis%E5%A4%9A%E7%BA%BF%E7%A8%8Bio%E6%A8%A1%E5%9E%8B%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 22 Feb 2020 12:42:24 +0000</pubDate>
      
      <guid>https://jiekun.dev/posts/2020-02-22-%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2%E5%A4%8D%E7%9B%98-redis%E5%A4%9A%E7%BA%BF%E7%A8%8Bio%E6%A8%A1%E5%9E%8B%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
      <description>面试 上周参加了字节跳动的面试，也是18年毕业后的首次面试，整场下来一共70分钟，面试官非常Nice，无奈自己太过紧张，很多准备好的知识点都没有能够准确传达意思。
面试中因为在简历上有提到Redis相关的内容，那么毫无疑问就会被问到了。先从经典的问题开始：Reids为什么这么快？那自然会回答诸如单线程、IO多路复用等固定套路，然后这里因为一直有关注Redis的相关新闻，知道Redis 6.0年末发布了RC1版本，其中新特性包括多线程IO，那么自然想在面试中提及一下。面试官应该对这点比较感兴趣，于是就继续探讨了这个多线程IO的模型。
 Q：Redis 6多线程是指什么？ A：Redis这边将部分处理流程改为多线程，具体来说是.. Q：是指查询是多线程吗？ A：应该说是处理请求的最后部分改为了多线程，因为这些部分涉及到数据的IO，是整个（Redis）模型中最耗时的部分，所以改成了多线程；这部分之前的比如用户请求进来、将请求放入一个队列中，还是单线程的。（注意这部分回答是错误的，实际上Redis是将网络IO的部分做成了多线程，后文继续分析） Q：如果我有一个SET操作的话，是单线程还是多线程？ A：多线程。（回答也是错的） Q：那如果是，因为Redis都是内存操作，如果多线程操作一个数据结构的话会有问题吗？ A：Emm，目前我理解的模型上看确实会有问题，比如并发改同一个Key，那可能Redis有对应处理这些问题比如进行加锁处理。（确实不了解，回答也自然是错的） Q：好，下一个问题..  这里先总结一下：
 因为Antirez在Redis Day介绍过，所以就了解到了有这么个新Feature，但是具体的实现因为没有看过源码，所以实际上对这个多线程模型的理解是有偏差的。 如果对这些点没有十足的把握的话，面试中尝试自己思考和解决这样的问题实际上还是会比较扣分，首先如果猜错了的话肯定不行，其次即使是猜对了也很难有足够的知识储备去复述出完整的模型出来，也会让自己一边思考一边表达起来很费劲。  于是坑坑洼哇地坚持完了70分钟的面试，再总结一下做得不足的地方，因为是1.5Year经验，面试官主要考察：
 现有的业务的一些设计细节的问题：要提前准备好你想介绍给面试官的业务系统，个人认为应该从业务中选出一两个难度比较大的点会比较合适。这次面试没有能够拿出对应的业务来介绍，是准备不到位。 数据库的基础知识：这块觉得回答得还可以，不过有的时候因为准备的东西比较多，会经常想充分地展现和描述，有的时候可能会比较冗长，也是表达不够精确的问题。 计算机网络的基础知识：不是科班毕业，没有能够答完美，实际上问题并不难。 计算机系统的基础知识：同上。 一道算法题：字节跳动给的算法题还是偏简单和经典的，建议多刷题和看Discussion总结。  所以就这样结束了第一次的社招面试，整体来说几个方向的基础知识需要回去再多写多看就可以了，然后表达上尽量控制时间和范围，深入的内容如果面试官希望和你继续探讨，自然会发问，如果没问，可以提及但是不应该直接展开讲。
Redis的Threaded IO 面试结束后马上知道这块的回答有问题，检查果然如此。所以也就借这个机会将Threaded IO对应的源码看了一遍，后续如果有机会的话，希望能跟下一位面试官再来探讨这个模型。
综述 本次新增的代码位于networking.c中，很显然多线程生效的位置就能猜出来是在网络请求上。作者希望改进读写缓冲区的性能，而不是命令执行的性能主要原因是：
 读写缓冲区的在命令执行的生命周期中是占了比较大的比重 Redis更倾向于保持简单的设计，如果在命令执行部分改用多线程会不得不处理各种问题，例如并发写入、加锁等  那么将读写缓冲区改为多线程后整个模型大致如下：
具体模型 线程初始化(initThreadedIO) 首先，如果用户没有开启多线程IO，也就是io_threads_num == 1时直接按照单线程模型处理；如果超过线程数IO_THREADS_MAX_NUM上限则异常退出。
紧接着Redis使用listCreate()创建io_threads_num个线程，并且对主线程（id=0）以外的线程进行处理：
 初始化线程的等待任务数为0 获取锁，使得线程不能进行操作 将线程tid与Redis中的线程id（for循环生成）进行映射  /* Initialize the data structures needed for threaded I/O. */ void initThreadedIO(void) { io_threads_active = 0; /* We start with threads not active.</description>
    </item>
    
  </channel>
</rss>