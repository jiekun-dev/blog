<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>容器 on Jiekun&#39;s Blog</title>
    <link>https://jiekun.dev/tags/%E5%AE%B9%E5%99%A8/</link>
    <description>Recent content in 容器 on Jiekun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 17 Nov 2019 04:54:19 +0000</lastBuildDate>
    
	<atom:link href="https://jiekun.dev/tags/%E5%AE%B9%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerの初体験</title>
      <link>https://jiekun.dev/posts/2019-11-17-docker%E3%81%AE%E5%88%9D%E4%BD%93%E9%A8%93/</link>
      <pubDate>Sun, 17 Nov 2019 04:54:19 +0000</pubDate>
      
      <guid>https://jiekun.dev/posts/2019-11-17-docker%E3%81%AE%E5%88%9D%E4%BD%93%E9%A8%93/</guid>
      <description>Docker实践 学习背景  没有接触过容器 不太了解微服务 偶尔使用Linux  概述 什么是Docker？不妨先来看一下为什么需要Docker：
微服务 微服务是模块化的，每个不同的服务独立运行，因此需要满足能够独立部署和一定的可伸缩性。在部署过程中每一处的人为操作都伴随着出错的风险，所以必须有方法来消除这种服务部署的风险。
Docker为这种使用场景提供了解决方案，使用容器（Container）来部署微服务可以做到：
 将部署过程标准化和自动化 环境隔离，满足微服务的独立运行要求  CI/CD CI是不断提交代码并且打包编译，然后自动使用测试用例验证来保障改动内容对功能的影响的一种实践；CD是CI的延伸，它将通过CI验证的内容自动地发布和部署到指定环境。构建CI/CD时一般会需要做到：
 环境可控 快速高效部署，流程化执行 可并行运行测试  使用Docker可以满足以上的需求，使开发者专注于开发而运维专注于项目部署。
Get started with Docker docker-katas项目中有一些Docker的基本知识讲解和实践，主要包括Docker的各种常用概念及命令，如：
 Docker的镜像（Images）、容器（Containers）、守护进程（Docker daemon）、客户端（Docker client）、公共仓库（Docker Hub）等概念 镜像的拉取（pull）、容器的创建与运行（run）等命令  在完成docker-katas练习后，基于这些内容以及参考相关书籍，本次实践的目标是实现一套简单的服务，需要包括：
 使用Docker的数据卷（Volume）来进行数据的共享 使用Docker的网络来使几个容器间可以进行数据交互 使用Docker的端口转发  Volume Docker通过数据卷来实现不同容器间、容器与宿主机间数据的共享。最容易想到的场景就是在宿主机上修改服务的配置文件然后运行在不同的容器间，这里配置一套Redis服务使得容器的redis-server使用本地的配置文件运行。
以Redis镜像创建容器，将本地的配置文件/data/redis-master/redis.conf挂载到容器的/data/redis.conf中，并且执行redis-server /data/redis.conf命令启动redis-server。
# duck@duck-MS-7A34:~$ sudo docker run -d --name redis-master -v /data/redis-master/redis.conf:/data/redis.conf redis redis-server /data/redis.conf&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 因为redis-master使用-d后台运行，因此redis.conf中的后台运行需要改为关闭：
# duck@duck-MS-7A34:~$ sudo vim /data/redis-master.conf aemonize no&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 现在可以看到容器服务的运行状态：
# duck@duck-MS-7A34:~$ sudo docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f45e340eb1ba redis &amp;quot;docker-entrypoint.</description>
    </item>
    
  </channel>
</rss>